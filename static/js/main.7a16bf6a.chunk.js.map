{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","splittableField","divisibleField","unduplicatableField","linkableField","useState","columns","setColumns","rows","setRows","selectionModel","setSelectionModel","toCamel","p","charAt","toLowerCase","substring","replace","s","toUpperCase","className","Typography","variant","slogans","Math","floor","random","length","getSlogan","style","height","width","pageSize","checkboxSelection","onSelectionModelChange","newSelection","console","log","onDrop","csv","newColumns","data","map","col","some","field","headerName","renderCell","params","href","value","target","rel","newRows","forEach","rowData","csvIndex","numberOfLines","reduce","accumulator","colData","split","lineIndex","row","colDataIndex","dateArray","lines","Number","push","onError","e","addRemoveButton","onRemoveFile","Button","color","onClick","bom","Uint8Array","titleRow","fields","colIndex","csvData","bodyRow","fieldIndex","toString","indexOf","blob","Blob","join","type","url","URL","createObjectURL","a","document","createElement","date","Date","Y","getFullYear","M","getMonth","slice","D","getDate","h","getHours","m","getMinutes","getSeconds","download","addEventListener","clickHandler","setTimeout","revokeObjectURL","removeEventListener","click","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7a16bf6a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { CSVReader } from 'react-papaparse';\nimport {\n  DataGrid,\n  GridCellParams,\n  GridColDef,\n  GridRowId,\n  GridValueGetterParams,\n} from '@material-ui/data-grid';\nimport { Button, Typography } from '@material-ui/core';\n\nfunction App() {\n  const splittableField = [\n    'buyAmount',\n    'buyCurrency',\n    'buyCurrencyAddress',\n    'buyFiatAmount',\n    'buyFiatCurrency',\n    'sellAmount',\n    'sellCurrency',\n    'sellCurrencyAddress',\n    'sellFiatAmount',\n    'sellFiatCurrency',\n  ];\n  const divisibleField = [\n    'buyAmount',\n    'buyFiatAmount',\n    'sellAmount',\n    'sellFiatAmount',\n  ];\n  const unduplicatableField = [\n    'feeAmount',\n    'feeCurrency',\n    'feeFiatAmount',\n    'feeFiatCurrency',\n  ];\n\n  const linkableField = ['link'];\n\n  const [columns, setColumns] = useState<GridColDef[]>([]);\n  const [rows, setRows] = useState<any[]>([]);\n\n  const [selectionModel, setSelectionModel] = useState<GridRowId[]>([]);\n\n  const toCamel = (p: string): string => {\n    p = p.charAt(0).toLowerCase() + p.substring(1);\n    return p.replace(/ ./g, (s: string) => s.charAt(1).toUpperCase());\n  };\n\n  const onDrop = (csv: any[]) => {\n    let newColumns: GridColDef[] = [];\n    if (csv.length > 0) {\n      newColumns = csv[0].data.map((col: string) => {\n        if (linkableField.some((field) => field === toCamel(col))) {\n          return {\n            field: toCamel(col),\n            headerName: col,\n            width: (col.length + 20) ** 1.5,\n            renderCell: (params: GridCellParams) => (\n              <a\n                href={params.value as string}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {params.value}\n              </a>\n            ),\n          };\n        }\n        return {\n          field: toCamel(col),\n          headerName: col,\n          width: (col.length + 20) ** 1.5,\n        };\n      });\n\n      setColumns(newColumns);\n    }\n\n    if (csv.length > 1) {\n      const newRows: any[] = [];\n      csv.forEach((rowData: any, csvIndex: number) => {\n        if (csvIndex !== 0) {\n          const numberOfLines: number = rowData.data.reduce(\n            (accumulator: number, colData: string) =>\n              colData.split('\\n').length > accumulator\n                ? colData.split('\\n').length\n                : accumulator,\n            0\n          );\n          for (let lineIndex = 0; lineIndex < numberOfLines; lineIndex++) {\n            const row: any = {};\n            rowData.data.forEach((colData: string, colDataIndex: number) => {\n              row[newColumns[colDataIndex].field] = colData;\n\n              if (newColumns[colDataIndex].field === 'date') {\n                const dateArray = colData.split('/');\n                row[newColumns[colDataIndex].field] =\n                  dateArray[2] + '/' + dateArray[0] + '/' + dateArray[1];\n              } else if (\n                splittableField.some(\n                  (field) => field === newColumns[colDataIndex].field\n                )\n              ) {\n                const lines = colData.split('\\n');\n                if (lines.length > 1) {\n                  row[newColumns[colDataIndex].field] = lines[lineIndex];\n                } else if (\n                  divisibleField.some(\n                    (field) => field === newColumns[colDataIndex].field\n                  )\n                ) {\n                  row[newColumns[colDataIndex].field] =\n                    colData !== '' ? Number(colData) / numberOfLines : '';\n                } else {\n                  row[newColumns[colDataIndex].field] = colData;\n                }\n              } else if (\n                unduplicatableField.some(\n                  (field) => field === newColumns[colDataIndex].field\n                )\n              ) {\n                if (lineIndex === 0) {\n                  row[newColumns[colDataIndex].field] = colData;\n                } else {\n                  row[newColumns[colDataIndex].field] = '';\n                }\n              } else if (newColumns[colDataIndex].field === 'txHash') {\n                row['id'] = colData;\n                if (lineIndex !== 0) {\n                  row['id'] = row['id'] + '_' + lineIndex;\n                }\n              }\n            });\n            newRows.push(row);\n          }\n        }\n      });\n\n      setRows(newRows);\n    }\n  };\n\n  const downloadCSV = () => {\n    const bom = new Uint8Array([0xef, 0xbb, 0xbf]);\n\n    let titleRow = '';\n    const fields = columns.map((col: GridColDef, colIndex: number) => {\n      if (colIndex !== 0) {\n        titleRow += ',';\n      }\n      titleRow += col.headerName;\n      return col.field;\n    });\n\n    const csvData: string[] = [titleRow];\n\n    rows.forEach((row) => {\n      let bodyRow = '';\n      fields.forEach((field: string, fieldIndex: number) => {\n        if (fieldIndex !== 0) {\n          bodyRow += ',';\n        }\n        if (row[field].toString().indexOf(',') !== -1) {\n          bodyRow += '\"' + row[field].toString().replace(/\"/g, '\"\"') + '\"';\n        } else {\n          bodyRow += row[field];\n        }\n      });\n      csvData.push(bodyRow);\n    });\n\n    const blob = new Blob([bom, csvData.join('\\n')], {\n      type: 'text/csv',\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const date = new Date();\n    const Y = date.getFullYear();\n    const M = ('00' + (date.getMonth() + 1)).slice(-2);\n    const D = ('00' + date.getDate()).slice(-2);\n    const h = ('00' + date.getHours()).slice(-2);\n    const m = ('00' + date.getMinutes()).slice(-2);\n    const s = ('00' + date.getSeconds()).slice(-2);\n    a.download = Y + M + D + h + m + s + 'formatted.csv';\n    const clickHandler = () => {\n      setTimeout(() => {\n        URL.revokeObjectURL(url);\n        a.removeEventListener('click', clickHandler);\n      }, 150);\n    };\n    a.addEventListener('click', clickHandler, false);\n    a.click();\n  };\n\n  const getSlogan = () => {\n    var slogans = [\n      '納税思想の高揚',\n      '自主納税の推進',\n      '納税貯蓄',\n      '税を考える',\n      '確定申告',\n      'ぜい ぜい ぜい ぜい ぜい ぜい ぜい ぜい ぜい ぜい ぜい',\n      '笑顔で納税',\n      '納税義務',\n    ];\n    return slogans[Math.floor(Math.random() * slogans.length)];\n  };\n\n  return (\n    <div className=\"App\">\n      <Typography variant=\"h3\">{getSlogan()}</Typography>\n      <div style={{ height: 800, width: '100%' }}>\n        <DataGrid\n          rows={rows}\n          columns={columns}\n          pageSize={50}\n          checkboxSelection\n          onSelectionModelChange={(newSelection) => {\n            setSelectionModel(newSelection.selectionModel);\n            console.log(newSelection.selectionModel);\n          }}\n          selectionModel={selectionModel}\n        />\n      </div>\n      <CSVReader\n        onDrop={onDrop}\n        onError={(e) => console.log(e)}\n        addRemoveButton\n        onRemoveFile={() => {\n          setRows([]);\n        }}\n      >\n        <span>Drop CSV file</span>\n      </CSVReader>\n      <Button variant=\"contained\" color=\"primary\" onClick={downloadCSV}>\n        Download CSV\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}